1. Node never sleeps
2. curl http://localhost:1337

3. curl -i http://localhost:1337

	HTTP/1.1 200 OK
	content-type: text/plain
	Date: Fri, 17 Mar 2017 07:00:03 GMT
	Connection: keep-alive
	Transfer-Encoding: chunked   ------------> Whatever loaded just return it. Dont wait for whole thing get loaded and return me at once.

	Welcome to my site

======================
APACHE BENCH(AB)
======================

Suppose we want to see how fast Yahoo can handle 100 requests, with a maximum of 10 requests running concurrently:
		
		-> ab -n 100 -c 10 http://www.yahoo.com/

		-> OUTPUT:
		-------------

		Concurrency Level:      10
		Time taken for tests:   1.889 seconds
		Complete requests:      100
		Failed requests:        0
		Write errors:           0
		Total transferred:      1003100 bytes
		HTML transferred:       949000 bytes
		Requests per second:    52.94 [#/sec] (mean)
		Time per request:       188.883 [ms] (mean)
		Time per request:       18.888 [ms] (mean, across all concurrent requests)
		Transfer rate:          518.62 [Kbytes/sec] received

		Connection Times (ms)
			      min  mean[+/-sd] median   max
		Connect:       57   59   1.7     59      64
		Processing:   117  126   7.5    124     162
		Waiting:       57   62   7.0     60      98
		Total:        175  186   8.0    184     224

		Percentage of the requests served within a certain time (ms)
		  50%    184
		  66%    186
		  75%    187
		  80%    188
		  90%    192
		  95%    203
		  98%    216
		  99%    224
		 100%    224 (longest request)


This means NODE handles concurrency very well. it will not get sleep/ wait for anything.

====================================================================
TCP -> Telnet to run TCP server   ( telnet localhost 1337)
HTTP -> CURL to run HTTP server   (curl http://localhost:1337)
====================================================================


================================================================

var tcp = require('net');
var PORT = 1337;
var HOST = "localhost";

console.log("***TCP Server Running");
console.log("**You are connected to " + HOST + " at port : " + PORT );

var server = tcp.createServer(function(socket) {
	console.log("** request sent to server**");
	
	socket.write("Hello\n");
	socket.write("gagan\n");
	
	socket.on('data', function(data) { 
		console.log("Data recieved from user = " + data);
		socket.write(data);
		console.log("Same data sent back to client");
	});
});
server.listen(1337);




1. Whenever we hit the URl, createServer() recieves socket object
2. Whenever data is provided, socket on('data') will hit 

